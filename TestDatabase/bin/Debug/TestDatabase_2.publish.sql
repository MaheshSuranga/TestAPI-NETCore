/*
Deployment script for TestDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TestDatabase"
:setvar DefaultFilePrefix "TestDatabase"
:setvar DefaultDataPath "C:\Users\UnicornMAS\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\UnicornMAS\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key f734c429-17c4-4c32-b724-56e91704f719 is skipped, element [dbo].[Worker].[Id] (SqlSimpleColumn) will not be renamed to code';


GO
PRINT N'Rename refactoring operation with key 80954d6e-24d5-427d-add0-61a969774534 is skipped, element [dbo].[WorkerStatistic].[Id] (SqlSimpleColumn) will not be renamed to code';


GO
PRINT N'Creating [dbo].[Worker]...';


GO
CREATE TABLE [dbo].[Worker] (
    [code]         NVARCHAR (16)  NOT NULL,
    [name]         NVARCHAR (100) NOT NULL,
    [description]  NVARCHAR (200) NULL,
    [location]     NVARCHAR (50)  NOT NULL,
    [position]     NVARCHAR (100) NOT NULL,
    [date_created] DATETIME       NOT NULL,
    [owner_code]   NVARCHAR (16)  NOT NULL,
    PRIMARY KEY CLUSTERED ([code] ASC)
);


GO
PRINT N'Creating [dbo].[WorkerStatistic]...';


GO
CREATE TABLE [dbo].[WorkerStatistic] (
    [code]            NVARCHAR (16)   NOT NULL,
    [hourly_rate]     DECIMAL (18, 2) NOT NULL,
    [hours_worked]    DECIMAL (18, 2) NOT NULL,
    [overtime_rate]   DECIMAL (18, 2) NOT NULL,
    [overtime_worked] DECIMAL (18, 2) NOT NULL,
    [owner_code]      NVARCHAR (16)   NOT NULL,
    PRIMARY KEY CLUSTERED ([code] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkerStatistic]...';


GO
ALTER TABLE [dbo].[WorkerStatistic]
    ADD DEFAULT 0 FOR [hourly_rate];


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkerStatistic]...';


GO
ALTER TABLE [dbo].[WorkerStatistic]
    ADD DEFAULT 0 FOR [hours_worked];


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkerStatistic]...';


GO
ALTER TABLE [dbo].[WorkerStatistic]
    ADD DEFAULT 0 FOR [overtime_rate];


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkerStatistic]...';


GO
ALTER TABLE [dbo].[WorkerStatistic]
    ADD DEFAULT 0 FOR [overtime_worked];


GO
PRINT N'Creating [dbo].[CheckWorkerCode]...';


GO
CREATE PROCEDURE [dbo].[CheckWorkerCode]
	@code NVARCHAR(16)
AS
	IF NOT EXISTS (SELECT code FROM Worker WHERE code=@code)
	SELECT '1'
	ELSE
	SELECT '0'
GO
PRINT N'Creating [dbo].[DeleteWorker]...';


GO
CREATE PROCEDURE [dbo].[DeleteWorker]
	@code NVARCHAR(16),
	@owner NVARCHAR(16)
AS
	DELETE FROM Worker WHERE code=@code AND owner_code=@owner
GO
PRINT N'Creating [dbo].[GetUserIdByToken]...';


GO
CREATE PROCEDURE [dbo].[GetUserIdByToken]
	@token NVARCHAR(16)
AS
	SELECT UserCode	FROM AuthToken WHERE Token = @token
GO
PRINT N'Creating [dbo].[GetWorker]...';


GO
CREATE PROCEDURE [dbo].[GetWorker]
	@code NVARCHAR(16),
	@owner NVARCHAR(16)
AS
	SELECT name,description,location,position,date_created FROM Worker WHERE code=@code AND owner_code=@owner
GO
PRINT N'Creating [dbo].[GetWorkerStatistic]...';


GO
CREATE PROCEDURE [dbo].[GetWorkerStatistic]
	@code NVARCHAR(16),
	@owner NVARCHAR(16)
AS
	SELECT hourly_rate, hours_worked, overtime_rate, overtime_worked FROM WorkerStatistic WHERE code=@code AND owner_code=@owner
GO
PRINT N'Creating [dbo].[InsertWorker]...';


GO
CREATE PROCEDURE [dbo].[InsertWorker]
	@code NVARCHAR(16),
	@name NVARCHAR(100),
	@description NVARCHAR(200),
	@location NVARCHAR(50),
	@position NVARCHAR(100),
	@owner NVARCHAR(16)
AS
	INSERT INTO Worker
	(code, name, description, location, position, owner_code, date_created)
	VALUES
	(@code, @name, @description, @location, @position, @owner, SYSUTCDATETIME())
GO
PRINT N'Creating [dbo].[InsertWorkerStatistic]...';


GO
CREATE PROCEDURE [dbo].[InsertWorkerStatistic]
	@code NVARCHAR(16),
	@owner NVARCHAR(16)
AS
	INSERT INTO WorkerStatistic
	(code, owner_code)
	Values
	(@code, @owner)
GO
PRINT N'Creating [dbo].[UpdateWorker]...';


GO
CREATE PROCEDURE [dbo].[UpdateWorker]
	@code NVARCHAR(16),
	@name NVARCHAR(100),
	@description NVARCHAR(200),
	@location NVARCHAR(50),
	@position NVARCHAR(100),
	@owner NVARCHAR(16)
AS
	UPDATE Worker SET name=@name, description=@description, location=@location, position=@position
	WHERE code=@code AND owner_code=@owner
GO
PRINT N'Creating [dbo].[UpdateWorkerStatistic]...';


GO
CREATE PROCEDURE [dbo].[UpdateWorkerStatistic]
	@code NVARCHAR(16),
	@owner NVARCHAR(16),
	@hourlyrate DECIMAL(18,2),
	@hoursworked DECIMAL(18,2),
	@overtimerate DECIMAL(18,2),
	@overtimeworked DECIMAL(18,2)
AS
	IF (@hourlyrate != 0)
	UPDATE WorkerStatistic SET hourly_rate=@hourlyrate WHERE code=@code AND owner_code=@owner

	IF (@hoursworked != 0)
	UPDATE WorkerStatistic SET hours_worked=(SELECT hours_worked FROM WorkerStatistic WHERE code=@code AND owner_code=@owner) + @hourlyrate WHERE code=@code AND owner_code=@owner

	IF (@overtimerate != 0)
	UPDATE WorkerStatistic SET overtime_rate=@overtimerate WHERE code=@code AND owner_code=@owner

	IF (@overtimeworked != 0)
	UPDATE WorkerStatistic SET overtime_worked=(SELECT overtime_worked FROM WorkerStatistic WHERE code=@code AND owner_code=@owner) + @overtimeworked WHERE code=@code AND owner_code=@owner
GO
PRINT N'Creating [dbo].[VerifyToken]...';


GO
CREATE PROCEDURE [dbo].[VerifyToken]
	@token NVARCHAR(16)
AS
	IF EXISTS (SELECT Token FROM AuthToken WHERE Token = @token)
	IF ((SELECT Date FROM AuthToken WHERE Token = @token) > SYSUTCDATETIME())
	SELECT 1
	ELSE
	SELECT 0
	ELSE
	SELECT 0
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f734c429-17c4-4c32-b724-56e91704f719')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f734c429-17c4-4c32-b724-56e91704f719')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '80954d6e-24d5-427d-add0-61a969774534')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('80954d6e-24d5-427d-add0-61a969774534')

GO

GO
PRINT N'Update complete.';


GO
